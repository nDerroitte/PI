TODO list for processing habit

1) format data to a parse vector for method 1 or 3, full vector of size 2^n for method2.

2) implement the autocorrelation function.

	method1 : apply the definition and take into account the parsity of the signal (about 0.01% of non zero element for going every week) for efficient computation (see wikipedia for definition). Adv: O(n^2) were n is the number of non zero element of the signal. Disadv: O(n^2)

	method2 : compute the autocorr throught a fourier transform computed by FFT algorithm (already implemented in java by the package apache commons math, see wikipedia for the relation between fourier transform and autocorr). Adv: O(n log(n)) where n is the closest power of 2 larger than the number of time step from the first non zero element to the last one. Disdv: do not use parsity. Adv: O(n log(n))

	method3: find some magic algorithm to compute fourier transform in less than O(n^2) where n is the number of non zero element in the input signal.

check all basic piece are well implemented.

Optimization: Test method1 and method2 to see in which condition which one is the best, according to the parsity and the length of the input signal.


3) Implement the processing (see matlab code, i will detailed it when step 1,2 are done):
	y = autocorr(input_signal, tau = 0:len(input_signal)/2) //find candidate period
	y = autocorr(y,tau)	// remove noise influence in the candidate period
	...
	
DATA FORMAT:
	time step: 1 minuts 
	current input = vector V of number given by DATE.millisecond. represent when a given user start a given trajectory
	apply the linear transformation: V <- (V-V[0])/60000
	keep track of V[0] to be able to inverse the transformation later.

	signal[V_i] = 1, 0 otherwise.

	Exemple: if V = [1 5 7 10] then signal = [1 0 0 0 1 0 1 0 0 1]

	signal is the input of autocorr, as a sparse vector for method1 (something like [1 5 7 10]), a full vector of size 2^n for method2: [1 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0]

