/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2662.0, "minX": 0.0, "maxY": 26989.0, "series": [{"data": [[0.0, 2662.0], [0.1, 3252.0], [0.2, 4592.0], [0.3, 6112.0], [0.4, 6549.0], [0.5, 7864.0], [0.6, 8183.0], [0.7, 9085.0], [0.8, 9427.0], [0.9, 10610.0], [1.0, 10994.0], [1.1, 12116.0], [1.2, 12430.0], [1.3, 13967.0], [1.4, 15422.0], [1.5, 15717.0], [1.6, 16885.0], [1.7, 17093.0], [1.8, 18346.0], [1.9, 19951.0], [2.0, 20229.0], [2.1, 21556.0], [2.2, 21667.0], [2.3, 22906.0], [2.4, 23115.0], [2.5, 24357.0], [2.6, 24438.0], [2.7, 24484.0], [2.8, 24586.0], [2.9, 24597.0], [3.0, 24628.0], [3.1, 24668.0], [3.2, 24674.0], [3.3, 24701.0], [3.4, 24710.0], [3.5, 24726.0], [3.6, 24738.0], [3.7, 24745.0], [3.8, 24754.0], [3.9, 24758.0], [4.0, 24763.0], [4.1, 24778.0], [4.2, 24784.0], [4.3, 24787.0], [4.4, 24797.0], [4.5, 24804.0], [4.6, 24809.0], [4.7, 24815.0], [4.8, 24819.0], [4.9, 24828.0], [5.0, 24832.0], [5.1, 24838.0], [5.2, 24843.0], [5.3, 24848.0], [5.4, 24862.0], [5.5, 24864.0], [5.6, 24866.0], [5.7, 24876.0], [5.8, 24880.0], [5.9, 24883.0], [6.0, 24886.0], [6.1, 24891.0], [6.2, 24896.0], [6.3, 24900.0], [6.4, 24904.0], [6.5, 24905.0], [6.6, 24907.0], [6.7, 24913.0], [6.8, 24915.0], [6.9, 24920.0], [7.0, 24922.0], [7.1, 24926.0], [7.2, 24929.0], [7.3, 24933.0], [7.4, 24935.0], [7.5, 24938.0], [7.6, 24940.0], [7.7, 24941.0], [7.8, 24943.0], [7.9, 24945.0], [8.0, 24945.0], [8.1, 24947.0], [8.2, 24948.0], [8.3, 24954.0], [8.4, 24955.0], [8.5, 24958.0], [8.6, 24961.0], [8.7, 24963.0], [8.8, 24968.0], [8.9, 24970.0], [9.0, 24971.0], [9.1, 24973.0], [9.2, 24975.0], [9.3, 24978.0], [9.4, 24980.0], [9.5, 24983.0], [9.6, 24986.0], [9.7, 24987.0], [9.8, 24990.0], [9.9, 24993.0], [10.0, 24994.0], [10.1, 24999.0], [10.2, 25001.0], [10.3, 25001.0], [10.4, 25003.0], [10.5, 25006.0], [10.6, 25007.0], [10.7, 25009.0], [10.8, 25010.0], [10.9, 25013.0], [11.0, 25017.0], [11.1, 25018.0], [11.2, 25019.0], [11.3, 25020.0], [11.4, 25022.0], [11.5, 25023.0], [11.6, 25024.0], [11.7, 25026.0], [11.8, 25028.0], [11.9, 25030.0], [12.0, 25031.0], [12.1, 25033.0], [12.2, 25035.0], [12.3, 25037.0], [12.4, 25038.0], [12.5, 25040.0], [12.6, 25041.0], [12.7, 25042.0], [12.8, 25044.0], [12.9, 25044.0], [13.0, 25047.0], [13.1, 25048.0], [13.2, 25051.0], [13.3, 25052.0], [13.4, 25053.0], [13.5, 25054.0], [13.6, 25056.0], [13.7, 25058.0], [13.8, 25060.0], [13.9, 25061.0], [14.0, 25062.0], [14.1, 25063.0], [14.2, 25065.0], [14.3, 25067.0], [14.4, 25070.0], [14.5, 25072.0], [14.6, 25074.0], [14.7, 25074.0], [14.8, 25076.0], [14.9, 25077.0], [15.0, 25078.0], [15.1, 25080.0], [15.2, 25081.0], [15.3, 25083.0], [15.4, 25084.0], [15.5, 25085.0], [15.6, 25086.0], [15.7, 25087.0], [15.8, 25089.0], [15.9, 25092.0], [16.0, 25094.0], [16.1, 25095.0], [16.2, 25096.0], [16.3, 25098.0], [16.4, 25102.0], [16.5, 25104.0], [16.6, 25105.0], [16.7, 25107.0], [16.8, 25109.0], [16.9, 25113.0], [17.0, 25114.0], [17.1, 25115.0], [17.2, 25117.0], [17.3, 25118.0], [17.4, 25120.0], [17.5, 25122.0], [17.6, 25125.0], [17.7, 25126.0], [17.8, 25128.0], [17.9, 25129.0], [18.0, 25131.0], [18.1, 25133.0], [18.2, 25137.0], [18.3, 25138.0], [18.4, 25140.0], [18.5, 25142.0], [18.6, 25143.0], [18.7, 25145.0], [18.8, 25146.0], [18.9, 25147.0], [19.0, 25149.0], [19.1, 25150.0], [19.2, 25150.0], [19.3, 25152.0], [19.4, 25154.0], [19.5, 25156.0], [19.6, 25157.0], [19.7, 25158.0], [19.8, 25159.0], [19.9, 25160.0], [20.0, 25161.0], [20.1, 25162.0], [20.2, 25165.0], [20.3, 25166.0], [20.4, 25168.0], [20.5, 25171.0], [20.6, 25171.0], [20.7, 25173.0], [20.8, 25173.0], [20.9, 25175.0], [21.0, 25175.0], [21.1, 25176.0], [21.2, 25178.0], [21.3, 25180.0], [21.4, 25182.0], [21.5, 25183.0], [21.6, 25184.0], [21.7, 25186.0], [21.8, 25187.0], [21.9, 25188.0], [22.0, 25191.0], [22.1, 25193.0], [22.2, 25195.0], [22.3, 25197.0], [22.4, 25197.0], [22.5, 25198.0], [22.6, 25201.0], [22.7, 25204.0], [22.8, 25206.0], [22.9, 25207.0], [23.0, 25209.0], [23.1, 25210.0], [23.2, 25212.0], [23.3, 25215.0], [23.4, 25215.0], [23.5, 25216.0], [23.6, 25218.0], [23.7, 25220.0], [23.8, 25221.0], [23.9, 25222.0], [24.0, 25223.0], [24.1, 25225.0], [24.2, 25227.0], [24.3, 25229.0], [24.4, 25231.0], [24.5, 25234.0], [24.6, 25235.0], [24.7, 25237.0], [24.8, 25240.0], [24.9, 25241.0], [25.0, 25242.0], [25.1, 25244.0], [25.2, 25246.0], [25.3, 25247.0], [25.4, 25249.0], [25.5, 25252.0], [25.6, 25253.0], [25.7, 25255.0], [25.8, 25256.0], [25.9, 25258.0], [26.0, 25259.0], [26.1, 25261.0], [26.2, 25262.0], [26.3, 25263.0], [26.4, 25264.0], [26.5, 25265.0], [26.6, 25267.0], [26.7, 25268.0], [26.8, 25270.0], [26.9, 25271.0], [27.0, 25273.0], [27.1, 25275.0], [27.2, 25276.0], [27.3, 25277.0], [27.4, 25279.0], [27.5, 25279.0], [27.6, 25280.0], [27.7, 25280.0], [27.8, 25282.0], [27.9, 25283.0], [28.0, 25284.0], [28.1, 25284.0], [28.2, 25287.0], [28.3, 25287.0], [28.4, 25291.0], [28.5, 25291.0], [28.6, 25292.0], [28.7, 25293.0], [28.8, 25296.0], [28.9, 25297.0], [29.0, 25300.0], [29.1, 25301.0], [29.2, 25302.0], [29.3, 25303.0], [29.4, 25305.0], [29.5, 25307.0], [29.6, 25308.0], [29.7, 25309.0], [29.8, 25310.0], [29.9, 25313.0], [30.0, 25315.0], [30.1, 25317.0], [30.2, 25319.0], [30.3, 25322.0], [30.4, 25323.0], [30.5, 25325.0], [30.6, 25326.0], [30.7, 25328.0], [30.8, 25329.0], [30.9, 25330.0], [31.0, 25331.0], [31.1, 25332.0], [31.2, 25334.0], [31.3, 25336.0], [31.4, 25337.0], [31.5, 25338.0], [31.6, 25339.0], [31.7, 25341.0], [31.8, 25343.0], [31.9, 25344.0], [32.0, 25345.0], [32.1, 25346.0], [32.2, 25347.0], [32.3, 25348.0], [32.4, 25350.0], [32.5, 25352.0], [32.6, 25353.0], [32.7, 25354.0], [32.8, 25355.0], [32.9, 25357.0], [33.0, 25358.0], [33.1, 25358.0], [33.2, 25360.0], [33.3, 25361.0], [33.4, 25362.0], [33.5, 25363.0], [33.6, 25363.0], [33.7, 25364.0], [33.8, 25365.0], [33.9, 25367.0], [34.0, 25368.0], [34.1, 25370.0], [34.2, 25370.0], [34.3, 25371.0], [34.4, 25372.0], [34.5, 25373.0], [34.6, 25373.0], [34.7, 25375.0], [34.8, 25376.0], [34.9, 25379.0], [35.0, 25380.0], [35.1, 25381.0], [35.2, 25382.0], [35.3, 25385.0], [35.4, 25387.0], [35.5, 25388.0], [35.6, 25389.0], [35.7, 25391.0], [35.8, 25392.0], [35.9, 25393.0], [36.0, 25395.0], [36.1, 25396.0], [36.2, 25397.0], [36.3, 25400.0], [36.4, 25401.0], [36.5, 25402.0], [36.6, 25404.0], [36.7, 25405.0], [36.8, 25406.0], [36.9, 25407.0], [37.0, 25408.0], [37.1, 25411.0], [37.2, 25413.0], [37.3, 25415.0], [37.4, 25416.0], [37.5, 25417.0], [37.6, 25418.0], [37.7, 25419.0], [37.8, 25421.0], [37.9, 25422.0], [38.0, 25423.0], [38.1, 25424.0], [38.2, 25425.0], [38.3, 25427.0], [38.4, 25428.0], [38.5, 25431.0], [38.6, 25432.0], [38.7, 25433.0], [38.8, 25435.0], [38.9, 25436.0], [39.0, 25438.0], [39.1, 25439.0], [39.2, 25440.0], [39.3, 25442.0], [39.4, 25443.0], [39.5, 25444.0], [39.6, 25445.0], [39.7, 25447.0], [39.8, 25448.0], [39.9, 25448.0], [40.0, 25450.0], [40.1, 25452.0], [40.2, 25452.0], [40.3, 25454.0], [40.4, 25457.0], [40.5, 25459.0], [40.6, 25460.0], [40.7, 25462.0], [40.8, 25463.0], [40.9, 25464.0], [41.0, 25465.0], [41.1, 25468.0], [41.2, 25468.0], [41.3, 25470.0], [41.4, 25471.0], [41.5, 25472.0], [41.6, 25473.0], [41.7, 25474.0], [41.8, 25475.0], [41.9, 25477.0], [42.0, 25478.0], [42.1, 25479.0], [42.2, 25480.0], [42.3, 25481.0], [42.4, 25481.0], [42.5, 25482.0], [42.6, 25483.0], [42.7, 25484.0], [42.8, 25485.0], [42.9, 25486.0], [43.0, 25487.0], [43.1, 25487.0], [43.2, 25489.0], [43.3, 25490.0], [43.4, 25492.0], [43.5, 25493.0], [43.6, 25493.0], [43.7, 25495.0], [43.8, 25497.0], [43.9, 25499.0], [44.0, 25500.0], [44.1, 25503.0], [44.2, 25504.0], [44.3, 25506.0], [44.4, 25508.0], [44.5, 25510.0], [44.6, 25511.0], [44.7, 25514.0], [44.8, 25516.0], [44.9, 25517.0], [45.0, 25518.0], [45.1, 25519.0], [45.2, 25522.0], [45.3, 25524.0], [45.4, 25526.0], [45.5, 25527.0], [45.6, 25528.0], [45.7, 25531.0], [45.8, 25532.0], [45.9, 25533.0], [46.0, 25534.0], [46.1, 25537.0], [46.2, 25537.0], [46.3, 25538.0], [46.4, 25540.0], [46.5, 25540.0], [46.6, 25542.0], [46.7, 25542.0], [46.8, 25544.0], [46.9, 25545.0], [47.0, 25547.0], [47.1, 25548.0], [47.2, 25550.0], [47.3, 25552.0], [47.4, 25552.0], [47.5, 25554.0], [47.6, 25555.0], [47.7, 25556.0], [47.8, 25558.0], [47.9, 25558.0], [48.0, 25561.0], [48.1, 25564.0], [48.2, 25566.0], [48.3, 25566.0], [48.4, 25567.0], [48.5, 25568.0], [48.6, 25569.0], [48.7, 25571.0], [48.8, 25572.0], [48.9, 25573.0], [49.0, 25574.0], [49.1, 25575.0], [49.2, 25577.0], [49.3, 25578.0], [49.4, 25579.0], [49.5, 25580.0], [49.6, 25581.0], [49.7, 25582.0], [49.8, 25583.0], [49.9, 25585.0], [50.0, 25586.0], [50.1, 25587.0], [50.2, 25589.0], [50.3, 25589.0], [50.4, 25590.0], [50.5, 25591.0], [50.6, 25592.0], [50.7, 25594.0], [50.8, 25594.0], [50.9, 25595.0], [51.0, 25596.0], [51.1, 25597.0], [51.2, 25599.0], [51.3, 25600.0], [51.4, 25601.0], [51.5, 25602.0], [51.6, 25603.0], [51.7, 25604.0], [51.8, 25605.0], [51.9, 25607.0], [52.0, 25608.0], [52.1, 25609.0], [52.2, 25611.0], [52.3, 25612.0], [52.4, 25614.0], [52.5, 25615.0], [52.6, 25617.0], [52.7, 25618.0], [52.8, 25619.0], [52.9, 25620.0], [53.0, 25621.0], [53.1, 25623.0], [53.2, 25624.0], [53.3, 25625.0], [53.4, 25626.0], [53.5, 25627.0], [53.6, 25628.0], [53.7, 25630.0], [53.8, 25632.0], [53.9, 25633.0], [54.0, 25634.0], [54.1, 25634.0], [54.2, 25635.0], [54.3, 25637.0], [54.4, 25641.0], [54.5, 25642.0], [54.6, 25644.0], [54.7, 25645.0], [54.8, 25646.0], [54.9, 25647.0], [55.0, 25648.0], [55.1, 25649.0], [55.2, 25650.0], [55.3, 25651.0], [55.4, 25653.0], [55.5, 25654.0], [55.6, 25655.0], [55.7, 25657.0], [55.8, 25659.0], [55.9, 25660.0], [56.0, 25661.0], [56.1, 25663.0], [56.2, 25664.0], [56.3, 25665.0], [56.4, 25667.0], [56.5, 25668.0], [56.6, 25670.0], [56.7, 25671.0], [56.8, 25672.0], [56.9, 25674.0], [57.0, 25674.0], [57.1, 25675.0], [57.2, 25676.0], [57.3, 25678.0], [57.4, 25679.0], [57.5, 25681.0], [57.6, 25682.0], [57.7, 25684.0], [57.8, 25685.0], [57.9, 25686.0], [58.0, 25688.0], [58.1, 25689.0], [58.2, 25691.0], [58.3, 25692.0], [58.4, 25693.0], [58.5, 25694.0], [58.6, 25695.0], [58.7, 25695.0], [58.8, 25697.0], [58.9, 25697.0], [59.0, 25699.0], [59.1, 25700.0], [59.2, 25701.0], [59.3, 25702.0], [59.4, 25703.0], [59.5, 25704.0], [59.6, 25705.0], [59.7, 25706.0], [59.8, 25707.0], [59.9, 25711.0], [60.0, 25712.0], [60.1, 25713.0], [60.2, 25715.0], [60.3, 25717.0], [60.4, 25718.0], [60.5, 25718.0], [60.6, 25720.0], [60.7, 25723.0], [60.8, 25724.0], [60.9, 25725.0], [61.0, 25728.0], [61.1, 25729.0], [61.2, 25729.0], [61.3, 25731.0], [61.4, 25733.0], [61.5, 25734.0], [61.6, 25734.0], [61.7, 25735.0], [61.8, 25737.0], [61.9, 25739.0], [62.0, 25740.0], [62.1, 25741.0], [62.2, 25743.0], [62.3, 25744.0], [62.4, 25745.0], [62.5, 25746.0], [62.6, 25747.0], [62.7, 25748.0], [62.8, 25749.0], [62.9, 25749.0], [63.0, 25751.0], [63.1, 25752.0], [63.2, 25752.0], [63.3, 25755.0], [63.4, 25756.0], [63.5, 25757.0], [63.6, 25758.0], [63.7, 25759.0], [63.8, 25760.0], [63.9, 25762.0], [64.0, 25764.0], [64.1, 25765.0], [64.2, 25766.0], [64.3, 25767.0], [64.4, 25768.0], [64.5, 25769.0], [64.6, 25770.0], [64.7, 25771.0], [64.8, 25772.0], [64.9, 25773.0], [65.0, 25775.0], [65.1, 25777.0], [65.2, 25778.0], [65.3, 25778.0], [65.4, 25780.0], [65.5, 25781.0], [65.6, 25784.0], [65.7, 25785.0], [65.8, 25787.0], [65.9, 25790.0], [66.0, 25791.0], [66.1, 25792.0], [66.2, 25792.0], [66.3, 25793.0], [66.4, 25795.0], [66.5, 25795.0], [66.6, 25796.0], [66.7, 25797.0], [66.8, 25800.0], [66.9, 25801.0], [67.0, 25802.0], [67.1, 25803.0], [67.2, 25804.0], [67.3, 25805.0], [67.4, 25806.0], [67.5, 25808.0], [67.6, 25809.0], [67.7, 25811.0], [67.8, 25812.0], [67.9, 25812.0], [68.0, 25814.0], [68.1, 25815.0], [68.2, 25816.0], [68.3, 25818.0], [68.4, 25819.0], [68.5, 25820.0], [68.6, 25822.0], [68.7, 25823.0], [68.8, 25823.0], [68.9, 25825.0], [69.0, 25825.0], [69.1, 25826.0], [69.2, 25827.0], [69.3, 25828.0], [69.4, 25829.0], [69.5, 25829.0], [69.6, 25830.0], [69.7, 25830.0], [69.8, 25831.0], [69.9, 25832.0], [70.0, 25836.0], [70.1, 25837.0], [70.2, 25838.0], [70.3, 25839.0], [70.4, 25840.0], [70.5, 25840.0], [70.6, 25842.0], [70.7, 25843.0], [70.8, 25843.0], [70.9, 25846.0], [71.0, 25847.0], [71.1, 25849.0], [71.2, 25851.0], [71.3, 25852.0], [71.4, 25854.0], [71.5, 25855.0], [71.6, 25857.0], [71.7, 25858.0], [71.8, 25860.0], [71.9, 25861.0], [72.0, 25862.0], [72.1, 25863.0], [72.2, 25864.0], [72.3, 25866.0], [72.4, 25866.0], [72.5, 25868.0], [72.6, 25870.0], [72.7, 25871.0], [72.8, 25873.0], [72.9, 25874.0], [73.0, 25875.0], [73.1, 25877.0], [73.2, 25878.0], [73.3, 25880.0], [73.4, 25881.0], [73.5, 25882.0], [73.6, 25884.0], [73.7, 25885.0], [73.8, 25887.0], [73.9, 25889.0], [74.0, 25890.0], [74.1, 25892.0], [74.2, 25893.0], [74.3, 25893.0], [74.4, 25894.0], [74.5, 25895.0], [74.6, 25896.0], [74.7, 25899.0], [74.8, 25900.0], [74.9, 25902.0], [75.0, 25904.0], [75.1, 25905.0], [75.2, 25907.0], [75.3, 25908.0], [75.4, 25910.0], [75.5, 25911.0], [75.6, 25912.0], [75.7, 25914.0], [75.8, 25915.0], [75.9, 25917.0], [76.0, 25918.0], [76.1, 25920.0], [76.2, 25921.0], [76.3, 25924.0], [76.4, 25926.0], [76.5, 25928.0], [76.6, 25930.0], [76.7, 25931.0], [76.8, 25932.0], [76.9, 25933.0], [77.0, 25935.0], [77.1, 25938.0], [77.2, 25940.0], [77.3, 25942.0], [77.4, 25944.0], [77.5, 25945.0], [77.6, 25946.0], [77.7, 25948.0], [77.8, 25949.0], [77.9, 25950.0], [78.0, 25950.0], [78.1, 25951.0], [78.2, 25953.0], [78.3, 25954.0], [78.4, 25954.0], [78.5, 25957.0], [78.6, 25958.0], [78.7, 25960.0], [78.8, 25962.0], [78.9, 25963.0], [79.0, 25964.0], [79.1, 25965.0], [79.2, 25965.0], [79.3, 25966.0], [79.4, 25968.0], [79.5, 25968.0], [79.6, 25971.0], [79.7, 25973.0], [79.8, 25974.0], [79.9, 25977.0], [80.0, 25979.0], [80.1, 25981.0], [80.2, 25985.0], [80.3, 25986.0], [80.4, 25988.0], [80.5, 25990.0], [80.6, 25990.0], [80.7, 25993.0], [80.8, 25994.0], [80.9, 25997.0], [81.0, 26000.0], [81.1, 26003.0], [81.2, 26003.0], [81.3, 26006.0], [81.4, 26007.0], [81.5, 26010.0], [81.6, 26012.0], [81.7, 26013.0], [81.8, 26014.0], [81.9, 26016.0], [82.0, 26017.0], [82.1, 26019.0], [82.2, 26020.0], [82.3, 26023.0], [82.4, 26024.0], [82.5, 26026.0], [82.6, 26029.0], [82.7, 26030.0], [82.8, 26031.0], [82.9, 26032.0], [83.0, 26036.0], [83.1, 26038.0], [83.2, 26040.0], [83.3, 26042.0], [83.4, 26044.0], [83.5, 26046.0], [83.6, 26047.0], [83.7, 26050.0], [83.8, 26051.0], [83.9, 26052.0], [84.0, 26055.0], [84.1, 26056.0], [84.2, 26058.0], [84.3, 26060.0], [84.4, 26063.0], [84.5, 26065.0], [84.6, 26067.0], [84.7, 26069.0], [84.8, 26071.0], [84.9, 26073.0], [85.0, 26075.0], [85.1, 26077.0], [85.2, 26077.0], [85.3, 26078.0], [85.4, 26081.0], [85.5, 26082.0], [85.6, 26084.0], [85.7, 26087.0], [85.8, 26088.0], [85.9, 26090.0], [86.0, 26092.0], [86.1, 26094.0], [86.2, 26096.0], [86.3, 26100.0], [86.4, 26103.0], [86.5, 26105.0], [86.6, 26108.0], [86.7, 26110.0], [86.8, 26114.0], [86.9, 26116.0], [87.0, 26118.0], [87.1, 26119.0], [87.2, 26123.0], [87.3, 26123.0], [87.4, 26126.0], [87.5, 26128.0], [87.6, 26130.0], [87.7, 26131.0], [87.8, 26133.0], [87.9, 26135.0], [88.0, 26138.0], [88.1, 26142.0], [88.2, 26144.0], [88.3, 26147.0], [88.4, 26148.0], [88.5, 26150.0], [88.6, 26155.0], [88.7, 26158.0], [88.8, 26162.0], [88.9, 26164.0], [89.0, 26166.0], [89.1, 26169.0], [89.2, 26172.0], [89.3, 26177.0], [89.4, 26180.0], [89.5, 26181.0], [89.6, 26182.0], [89.7, 26185.0], [89.8, 26187.0], [89.9, 26190.0], [90.0, 26194.0], [90.1, 26199.0], [90.2, 26202.0], [90.3, 26208.0], [90.4, 26212.0], [90.5, 26215.0], [90.6, 26218.0], [90.7, 26227.0], [90.8, 26228.0], [90.9, 26233.0], [91.0, 26235.0], [91.1, 26239.0], [91.2, 26244.0], [91.3, 26250.0], [91.4, 26255.0], [91.5, 26259.0], [91.6, 26263.0], [91.7, 26266.0], [91.8, 26271.0], [91.9, 26276.0], [92.0, 26284.0], [92.1, 26290.0], [92.2, 26292.0], [92.3, 26297.0], [92.4, 26298.0], [92.5, 26301.0], [92.6, 26304.0], [92.7, 26308.0], [92.8, 26313.0], [92.9, 26319.0], [93.0, 26321.0], [93.1, 26326.0], [93.2, 26330.0], [93.3, 26335.0], [93.4, 26344.0], [93.5, 26351.0], [93.6, 26354.0], [93.7, 26359.0], [93.8, 26363.0], [93.9, 26366.0], [94.0, 26370.0], [94.1, 26373.0], [94.2, 26377.0], [94.3, 26379.0], [94.4, 26384.0], [94.5, 26388.0], [94.6, 26391.0], [94.7, 26395.0], [94.8, 26396.0], [94.9, 26402.0], [95.0, 26405.0], [95.1, 26409.0], [95.2, 26412.0], [95.3, 26416.0], [95.4, 26418.0], [95.5, 26422.0], [95.6, 26426.0], [95.7, 26431.0], [95.8, 26437.0], [95.9, 26441.0], [96.0, 26445.0], [96.1, 26452.0], [96.2, 26454.0], [96.3, 26462.0], [96.4, 26464.0], [96.5, 26467.0], [96.6, 26472.0], [96.7, 26474.0], [96.8, 26479.0], [96.9, 26481.0], [97.0, 26482.0], [97.1, 26486.0], [97.2, 26488.0], [97.3, 26491.0], [97.4, 26492.0], [97.5, 26496.0], [97.6, 26502.0], [97.7, 26508.0], [97.8, 26511.0], [97.9, 26515.0], [98.0, 26521.0], [98.1, 26522.0], [98.2, 26532.0], [98.3, 26537.0], [98.4, 26541.0], [98.5, 26550.0], [98.6, 26553.0], [98.7, 26559.0], [98.8, 26570.0], [98.9, 26572.0], [99.0, 26579.0], [99.1, 26585.0], [99.2, 26600.0], [99.3, 26608.0], [99.4, 26619.0], [99.5, 26634.0], [99.6, 26643.0], [99.7, 26659.0], [99.8, 26715.0], [99.9, 26809.0]], "isOverall": false, "label": "get data greg", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2600.0, "maxY": 365.0, "series": [{"data": [[2600.0, 1.0], [2800.0, 2.0], [3000.0, 1.0], [3300.0, 1.0], [3200.0, 1.0], [3400.0, 1.0], [3700.0, 1.0], [4400.0, 1.0], [4500.0, 1.0], [4700.0, 1.0], [5400.0, 1.0], [6100.0, 2.0], [6200.0, 2.0], [6600.0, 1.0], [6500.0, 3.0], [7400.0, 1.0], [7900.0, 1.0], [7800.0, 2.0], [7700.0, 1.0], [8100.0, 4.0], [8200.0, 2.0], [8300.0, 1.0], [9100.0, 1.0], [9000.0, 1.0], [9400.0, 2.0], [9600.0, 2.0], [9300.0, 2.0], [10700.0, 2.0], [10600.0, 1.0], [10500.0, 1.0], [11000.0, 1.0], [10900.0, 2.0], [12200.0, 2.0], [12100.0, 2.0], [11800.0, 1.0], [12000.0, 2.0], [12400.0, 1.0], [13800.0, 1.0], [13900.0, 5.0], [14000.0, 2.0], [15300.0, 1.0], [15700.0, 2.0], [15800.0, 1.0], [15600.0, 2.0], [15500.0, 1.0], [15400.0, 1.0], [17100.0, 1.0], [16900.0, 2.0], [17000.0, 1.0], [16800.0, 3.0], [16700.0, 1.0], [18200.0, 1.0], [18300.0, 4.0], [18400.0, 2.0], [18700.0, 1.0], [19900.0, 1.0], [20000.0, 2.0], [20100.0, 1.0], [20200.0, 2.0], [20300.0, 1.0], [20500.0, 1.0], [21500.0, 4.0], [21600.0, 2.0], [21700.0, 2.0], [23000.0, 2.0], [22900.0, 2.0], [23100.0, 1.0], [22800.0, 2.0], [23300.0, 1.0], [24300.0, 6.0], [24400.0, 7.0], [24500.0, 9.0], [24800.0, 83.0], [24600.0, 18.0], [24900.0, 179.0], [24700.0, 52.0], [25000.0, 284.0], [25200.0, 294.0], [25100.0, 285.0], [25300.0, 333.0], [25500.0, 336.0], [25400.0, 352.0], [26500.0, 76.0], [26300.0, 110.0], [26200.0, 107.0], [26600.0, 27.0], [26400.0, 123.0], [26000.0, 242.0], [26100.0, 176.0], [25800.0, 365.0], [25600.0, 356.0], [25700.0, 354.0], [25900.0, 285.0], [26900.0, 2.0], [26800.0, 3.0], [26700.0, 5.0]], "isOverall": false, "label": "get data greg", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 26900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4580.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4580.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4580.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 23.08888888888889, "minX": 1.55734482E12, "maxY": 100.0, "series": [{"data": [[1.55734566E12, 100.0], [1.55734488E12, 100.0], [1.55734596E12, 100.0], [1.5573453E12, 100.0], [1.5573456E12, 100.0], [1.55734494E12, 100.0], [1.55734542E12, 100.0], [1.55734572E12, 100.0], [1.55734482E12, 81.71875], [1.55734602E12, 93.48230088495575], [1.55734536E12, 100.0], [1.55734518E12, 100.0], [1.55734548E12, 100.0], [1.55734506E12, 100.0], [1.55734578E12, 100.0], [1.55734512E12, 100.0], [1.55734608E12, 23.08888888888889], [1.5573459E12, 100.0], [1.55734524E12, 100.0], [1.55734554E12, 100.0], [1.557345E12, 100.0], [1.55734584E12, 100.0]], "isOverall": false, "label": "Scenario 1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55734608E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6513.0, "minX": 1.0, "maxY": 25958.0, "series": [{"data": [[2.0, 24711.0], [3.0, 24974.0], [4.0, 24979.0], [5.0, 24970.0], [6.0, 25308.0], [7.0, 25026.0], [8.0, 24948.0], [9.0, 25464.0], [10.0, 25579.0], [11.0, 25474.0], [12.0, 25421.0], [13.0, 25233.0], [14.0, 25468.0], [16.0, 25218.5], [17.0, 25576.0], [18.0, 25509.0], [19.0, 25347.0], [20.0, 25270.0], [21.0, 25095.0], [22.0, 25401.0], [23.0, 25212.0], [24.0, 25018.0], [25.0, 25688.0], [26.0, 25591.0], [28.0, 25580.5], [29.0, 25031.0], [30.0, 25307.0], [31.0, 25221.0], [33.0, 25448.0], [35.0, 25676.5], [37.0, 25307.0], [36.0, 25604.0], [39.0, 25249.0], [38.0, 25382.0], [41.0, 25054.0], [40.0, 25813.0], [43.0, 25617.0], [42.0, 25520.0], [45.0, 25195.0], [44.0, 25698.0], [47.0, 25019.0], [46.0, 25386.0], [49.0, 25505.5], [51.0, 25571.0], [50.0, 25508.0], [53.0, 8686.75], [52.0, 25562.0], [54.0, 7465.8], [55.0, 14459.0], [57.0, 25526.5], [59.0, 25500.0], [58.0, 25460.0], [61.0, 25019.0], [60.0, 25604.0], [62.0, 25344.0], [67.0, 25449.0], [66.0, 25958.0], [65.0, 25609.0], [64.0, 25403.0], [71.0, 25157.0], [70.0, 25087.0], [69.0, 25280.0], [68.0, 25425.0], [74.0, 15098.0], [75.0, 12531.666666666668], [73.0, 25718.0], [72.0, 25294.0], [76.0, 9290.2], [77.0, 15645.0], [79.0, 25171.0], [78.0, 25370.0], [82.0, 25772.0], [80.0, 25358.0], [86.0, 25271.0], [85.0, 25276.0], [84.0, 25420.0], [90.0, 25692.0], [89.0, 25589.666666666668], [95.0, 25438.0], [94.0, 25242.0], [93.0, 25193.0], [92.0, 25479.5], [96.0, 16841.0], [97.0, 11861.5], [98.0, 7087.333333333333], [99.0, 6513.0], [100.0, 25415.690065037023], [1.0, 24300.0]], "isOverall": false, "label": "get data greg", "isController": false}, {"data": [[98.79497816593874, 25309.463100436675]], "isOverall": false, "label": "get data greg-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 189.33333333333334, "minX": 1.55734482E12, "maxY": 1672.2333333333333, "series": [{"data": [[1.55734566E12, 1664.8666666666666], [1.55734488E12, 1657.5], [1.55734596E12, 1672.2333333333333], [1.5573453E12, 1635.4], [1.5573456E12, 1664.8666666666666], [1.55734494E12, 1642.7666666666667], [1.55734542E12, 1657.5], [1.55734572E12, 1672.2333333333333], [1.55734482E12, 235.73333333333332], [1.55734602E12, 1664.8666666666666], [1.55734536E12, 1657.5], [1.55734518E12, 1657.5], [1.55734548E12, 1657.5], [1.55734506E12, 1664.8666666666666], [1.55734578E12, 1664.8666666666666], [1.55734512E12, 1657.5], [1.55734608E12, 331.5], [1.5573459E12, 1642.7666666666667], [1.55734524E12, 1650.1333333333334], [1.55734554E12, 1650.1333333333334], [1.557345E12, 1664.8666666666666], [1.55734584E12, 1672.2333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.55734566E12, 1337.1666666666667], [1.55734488E12, 1331.25], [1.55734596E12, 1343.0833333333333], [1.5573453E12, 1313.5], [1.5573456E12, 1337.1666666666667], [1.55734494E12, 1319.4166666666667], [1.55734542E12, 1331.25], [1.55734572E12, 1343.0833333333333], [1.55734482E12, 189.33333333333334], [1.55734602E12, 1337.1666666666667], [1.55734536E12, 1331.25], [1.55734518E12, 1331.25], [1.55734548E12, 1331.25], [1.55734506E12, 1337.1666666666667], [1.55734578E12, 1337.1666666666667], [1.55734512E12, 1331.25], [1.55734608E12, 266.25], [1.5573459E12, 1319.4166666666667], [1.55734524E12, 1325.3333333333333], [1.55734554E12, 1325.3333333333333], [1.557345E12, 1337.1666666666667], [1.55734584E12, 1343.0833333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55734608E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5987.78125, "minX": 1.55734482E12, "maxY": 25792.702222222233, "series": [{"data": [[1.55734566E12, 25639.70796460176], [1.55734488E12, 22458.25777777777], [1.55734596E12, 25666.713656387656], [1.5573453E12, 25700.900900900895], [1.5573456E12, 25471.367256637168], [1.55734494E12, 25761.313901345296], [1.55734542E12, 25547.76], [1.55734572E12, 25433.95154185022], [1.55734482E12, 5987.78125], [1.55734602E12, 25427.23451327432], [1.55734536E12, 25792.702222222233], [1.55734518E12, 25733.06666666666], [1.55734548E12, 25615.928888888877], [1.55734506E12, 25618.358407079635], [1.55734578E12, 25465.637168141595], [1.55734512E12, 25563.44444444445], [1.55734608E12, 25320.155555555557], [1.5573459E12, 25607.022421524674], [1.55734524E12, 25693.169642857138], [1.55734554E12, 25608.294642857138], [1.557345E12, 25731.973451327434], [1.55734584E12, 25401.449339207036]], "isOverall": false, "label": "get data greg", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.55734608E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5987.78125, "minX": 1.55734482E12, "maxY": 25792.702222222233, "series": [{"data": [[1.55734566E12, 25639.70796460176], [1.55734488E12, 22458.240000000005], [1.55734596E12, 25666.713656387656], [1.5573453E12, 25700.900900900895], [1.5573456E12, 25471.35840707965], [1.55734494E12, 25761.295964125577], [1.55734542E12, 25547.755555555552], [1.55734572E12, 25433.95154185022], [1.55734482E12, 5987.78125], [1.55734602E12, 25427.23008849556], [1.55734536E12, 25792.702222222233], [1.55734518E12, 25733.06666666666], [1.55734548E12, 25615.928888888877], [1.55734506E12, 25618.358407079635], [1.55734578E12, 25465.628318584073], [1.55734512E12, 25563.44444444445], [1.55734608E12, 25320.155555555557], [1.5573459E12, 25607.022421524674], [1.55734524E12, 25693.169642857138], [1.55734554E12, 25608.28571428572], [1.557345E12, 25731.969026548668], [1.55734584E12, 25401.449339207036]], "isOverall": false, "label": "get data greg", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.55734608E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 74.87610619469031, "minX": 1.55734482E12, "maxY": 736.90625, "series": [{"data": [[1.55734566E12, 78.54867256637168], [1.55734488E12, 86.58222222222223], [1.55734596E12, 77.99999999999996], [1.5573453E12, 78.79729729729726], [1.5573456E12, 79.5796460176991], [1.55734494E12, 84.60538116591931], [1.55734542E12, 79.87999999999997], [1.55734572E12, 76.17621145374451], [1.55734482E12, 736.90625], [1.55734602E12, 74.87610619469031], [1.55734536E12, 75.27999999999996], [1.55734518E12, 78.74222222222224], [1.55734548E12, 88.2977777777778], [1.55734506E12, 77.76991150442474], [1.55734578E12, 79.22123893805313], [1.55734512E12, 81.08888888888892], [1.55734608E12, 80.5111111111111], [1.5573459E12, 80.3856502242153], [1.55734524E12, 78.20982142857144], [1.55734554E12, 91.51339285714288], [1.557345E12, 80.18141592920354], [1.55734584E12, 83.04845814977972]], "isOverall": false, "label": "get data greg", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.55734608E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2662.0, "minX": 1.55734482E12, "maxY": 26989.0, "series": [{"data": [[1.55734566E12, 26488.0], [1.55734488E12, 26989.0], [1.55734596E12, 26537.0], [1.5573453E12, 26634.0], [1.5573456E12, 26115.0], [1.55734494E12, 26861.0], [1.55734542E12, 26060.0], [1.55734572E12, 26128.0], [1.55734482E12, 8344.0], [1.55734602E12, 25978.0], [1.55734536E12, 26425.0], [1.55734518E12, 26809.0], [1.55734548E12, 26472.0], [1.55734506E12, 26598.0], [1.55734578E12, 26276.0], [1.55734512E12, 26462.0], [1.55734608E12, 25836.0], [1.5573459E12, 26550.0], [1.55734524E12, 26660.0], [1.55734554E12, 26553.0], [1.557345E12, 26779.0], [1.55734584E12, 26228.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.55734566E12, 24864.0], [1.55734488E12, 9085.0], [1.55734596E12, 24597.0], [1.5573453E12, 24945.0], [1.5573456E12, 24699.0], [1.55734494E12, 24759.0], [1.55734542E12, 24902.0], [1.55734572E12, 24774.0], [1.55734482E12, 2662.0], [1.55734602E12, 24881.0], [1.55734536E12, 25084.0], [1.55734518E12, 24809.0], [1.55734548E12, 25001.0], [1.55734506E12, 24629.0], [1.55734578E12, 24469.0], [1.55734512E12, 24752.0], [1.55734608E12, 24300.0], [1.5573459E12, 24649.0], [1.55734524E12, 24617.0], [1.55734554E12, 24668.0], [1.557345E12, 24670.0], [1.55734584E12, 24315.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.55734566E12, 26134.9], [1.55734488E12, 26530.2], [1.55734596E12, 26194.8], [1.5573453E12, 26186.2], [1.5573456E12, 25912.0], [1.55734494E12, 26499.6], [1.55734542E12, 25868.8], [1.55734572E12, 25942.6], [1.55734482E12, 8220.8], [1.55734602E12, 25689.9], [1.55734536E12, 26104.0], [1.55734518E12, 26206.2], [1.55734548E12, 26113.0], [1.55734506E12, 26293.8], [1.55734578E12, 26052.5], [1.55734512E12, 26047.2], [1.55734608E12, 25692.0], [1.5573459E12, 26240.2], [1.55734524E12, 26394.0], [1.55734554E12, 26204.5], [1.557345E12, 26524.3], [1.55734584E12, 25876.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.55734566E12, 26452.5], [1.55734488E12, 26917.9], [1.55734596E12, 26511.0], [1.5573453E12, 26615.4], [1.5573456E12, 26064.5], [1.55734494E12, 26738.56], [1.55734542E12, 26049.4], [1.55734572E12, 26066.24], [1.55734482E12, 8344.0], [1.55734602E12, 25955.57], [1.55734536E12, 26392.02], [1.55734518E12, 26561.14], [1.55734548E12, 26429.08], [1.55734506E12, 26534.03], [1.55734578E12, 26258.31], [1.55734512E12, 26307.36], [1.55734608E12, 25836.0], [1.5573459E12, 26463.28], [1.55734524E12, 26646.75], [1.55734554E12, 26470.0], [1.557345E12, 26744.82], [1.55734584E12, 26207.28]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.55734566E12, 26216.3], [1.55734488E12, 26581.7], [1.55734596E12, 26436.0], [1.5573453E12, 26383.95], [1.5573456E12, 25969.55], [1.55734494E12, 26573.4], [1.55734542E12, 25946.0], [1.55734572E12, 25993.0], [1.55734482E12, 8285.5], [1.55734602E12, 25743.1], [1.55734536E12, 26184.8], [1.55734518E12, 26462.3], [1.55734548E12, 26217.2], [1.55734506E12, 26422.5], [1.55734578E12, 26116.95], [1.55734512E12, 26113.6], [1.55734608E12, 25792.9], [1.5573459E12, 26302.8], [1.55734524E12, 26546.25], [1.55734554E12, 26358.75], [1.557345E12, 26609.3], [1.55734584E12, 26052.4]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55734608E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10787.5, "minX": 1.0, "maxY": 25625.0, "series": [{"data": [[8.0, 10787.5], [2.0, 25589.5], [4.0, 25584.5], [1.0, 25575.0], [5.0, 25558.0], [6.0, 25621.0], [3.0, 25625.0], [7.0, 25620.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10787.5, "minX": 1.0, "maxY": 25625.0, "series": [{"data": [[8.0, 10787.5], [2.0, 25589.5], [4.0, 25584.5], [1.0, 25575.0], [5.0, 25558.0], [6.0, 25621.0], [3.0, 25625.0], [7.0, 25620.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.2, "minX": 1.55734482E12, "maxY": 3.8, "series": [{"data": [[1.55734566E12, 3.7333333333333334], [1.55734488E12, 3.7], [1.55734596E12, 3.7666666666666666], [1.5573453E12, 3.7333333333333334], [1.5573456E12, 3.783333333333333], [1.55734494E12, 3.7333333333333334], [1.55734542E12, 3.75], [1.55734572E12, 3.7666666666666666], [1.55734482E12, 2.2], [1.55734602E12, 2.9166666666666665], [1.55734536E12, 3.7333333333333334], [1.55734518E12, 3.75], [1.55734548E12, 3.7333333333333334], [1.55734506E12, 3.7333333333333334], [1.55734578E12, 3.8], [1.55734512E12, 3.75], [1.5573459E12, 3.75], [1.55734524E12, 3.75], [1.55734554E12, 3.7666666666666666], [1.557345E12, 3.7333333333333334], [1.55734584E12, 3.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55734602E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.55734482E12, "maxY": 3.783333333333333, "series": [{"data": [[1.55734566E12, 3.7666666666666666], [1.55734488E12, 3.75], [1.55734596E12, 3.783333333333333], [1.5573453E12, 3.7], [1.5573456E12, 3.7666666666666666], [1.55734494E12, 3.716666666666667], [1.55734542E12, 3.75], [1.55734572E12, 3.783333333333333], [1.55734482E12, 0.5333333333333333], [1.55734602E12, 3.7666666666666666], [1.55734536E12, 3.75], [1.55734518E12, 3.75], [1.55734548E12, 3.75], [1.55734506E12, 3.7666666666666666], [1.55734578E12, 3.7666666666666666], [1.55734512E12, 3.75], [1.55734608E12, 0.75], [1.5573459E12, 3.716666666666667], [1.55734524E12, 3.7333333333333334], [1.55734554E12, 3.7333333333333334], [1.557345E12, 3.7666666666666666], [1.55734584E12, 3.783333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55734608E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.55734482E12, "maxY": 3.783333333333333, "series": [{"data": [[1.55734566E12, 3.7666666666666666], [1.55734488E12, 3.75], [1.55734596E12, 3.783333333333333], [1.5573453E12, 3.7], [1.5573456E12, 3.7666666666666666], [1.55734494E12, 3.716666666666667], [1.55734542E12, 3.75], [1.55734572E12, 3.783333333333333], [1.55734482E12, 0.5333333333333333], [1.55734602E12, 3.7666666666666666], [1.55734536E12, 3.75], [1.55734518E12, 3.75], [1.55734548E12, 3.75], [1.55734506E12, 3.7666666666666666], [1.55734578E12, 3.7666666666666666], [1.55734512E12, 3.75], [1.55734608E12, 0.75], [1.5573459E12, 3.716666666666667], [1.55734524E12, 3.7333333333333334], [1.55734554E12, 3.7333333333333334], [1.557345E12, 3.7666666666666666], [1.55734584E12, 3.783333333333333]], "isOverall": false, "label": "get data greg-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.55734608E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.55734482E12, "maxY": 3.783333333333333, "series": [{"data": [[1.55734566E12, 3.7666666666666666], [1.55734488E12, 3.75], [1.55734596E12, 3.783333333333333], [1.5573453E12, 3.7], [1.5573456E12, 3.7666666666666666], [1.55734494E12, 3.716666666666667], [1.55734542E12, 3.75], [1.55734572E12, 3.783333333333333], [1.55734482E12, 0.5333333333333333], [1.55734602E12, 3.7666666666666666], [1.55734536E12, 3.75], [1.55734518E12, 3.75], [1.55734548E12, 3.75], [1.55734506E12, 3.7666666666666666], [1.55734578E12, 3.7666666666666666], [1.55734512E12, 3.75], [1.55734608E12, 0.75], [1.5573459E12, 3.716666666666667], [1.55734524E12, 3.7333333333333334], [1.55734554E12, 3.7333333333333334], [1.557345E12, 3.7666666666666666], [1.55734584E12, 3.783333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.55734608E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

